<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/home/jefersongriza/Konora/kara/src/infra/db/mongodb/account/account-mongo-repository.spec.ts">
    <testCase name="Account Mongo Repository add() Should return an account on add success" duration="12"/>
    <testCase name="Account Mongo Repository loadByEmail() Should return an account on loadByEmail success" duration="6"/>
    <testCase name="Account Mongo Repository loadByEmail() Should return null if loadByEmail fail" duration="2"/>
    <testCase name="Account Mongo Repository updateAccessToken() Should update the account accessToken on updateAccessToken success" duration="6"/>
    <testCase name="Account Mongo Repository loadByToken() Should return an account on loadByToken without role" duration="3"/>
    <testCase name="Account Mongo Repository loadByToken() Should return an account on loadByToken with admin role" duration="3"/>
    <testCase name="Account Mongo Repository loadByToken() Should return null on loadByToken with invalid role" duration="3"/>
    <testCase name="Account Mongo Repository loadByToken() Should return an account on loadByToken if user is admin" duration="5"/>
    <testCase name="Account Mongo Repository loadByToken() Should return null if loadByEmail fail" duration="2"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/account/authentication/db-authentication.spec.ts">
    <testCase name="DbAuthentication UseCase should call LoadAccountByEmailRepository with correct email" duration="3"/>
    <testCase name="DbAuthentication UseCase should throw if LoadAccountByEmailRepository throws" duration="11"/>
    <testCase name="DbAuthentication UseCase should return null if LoadAccountByEmailRepository returns null" duration="1"/>
    <testCase name="DbAuthentication UseCase should call HashComparer with correct values" duration="0"/>
    <testCase name="DbAuthentication UseCase should throw if HashComparer throws" duration="0"/>
    <testCase name="DbAuthentication UseCase should return null if HashComparer returns false" duration="1"/>
    <testCase name="DbAuthentication UseCase should call Encrypter with correct id" duration="1"/>
    <testCase name="DbAuthentication UseCase should throw if Encrypter throws" duration="1"/>
    <testCase name="DbAuthentication UseCase should return a token on success" duration="1"/>
    <testCase name="DbAuthentication UseCase should call UpdateAccessTokenRepository with correct values" duration="1"/>
    <testCase name="DbAuthentication UseCase should throw if UpdateAccessTokenRepository throws" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/presentation/controllers/access/signup/signup-controller.spec.ts">
    <testCase name="SignUp Controller should return 500 if AddAccount throws" duration="7"/>
    <testCase name="SignUp Controller should call AddAccount with correct values" duration="1"/>
    <testCase name="SignUp Controller should return 403 if AddAcounts returns null" duration="0"/>
    <testCase name="SignUp Controller should return 200 if valid data is provided" duration="0"/>
    <testCase name="SignUp Controller should call Validation with correct value" duration="1"/>
    <testCase name="SignUp Controller should return 400 if Validation returns an error" duration="0"/>
    <testCase name="SignUp Controller should call Authentication with correct values" duration="1"/>
    <testCase name="SignUp Controller should return 500 if Authentication throws" duration="2"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/presentation/controllers/survey-result/save-survey-result/save-survey-result-controller.spec.ts">
    <testCase name="SaveSurveyResult Controller Should call LoadSurveyById with correct values" duration="1"/>
    <testCase name="SaveSurveyResult Controller Should return 403 if LoadSurveyById returns null" duration="1"/>
    <testCase name="SaveSurveyResult Controller Should return 500 if LoadSurveyById throws" duration="7"/>
    <testCase name="SaveSurveyResult Controller Should return 403 if an invalid answer is provided" duration="0"/>
    <testCase name="SaveSurveyResult Controller Should call SaveSurveyResult with correct values" duration="1"/>
    <testCase name="SaveSurveyResult Controller Should return 500 if SaveSurveyResult throws" duration="1"/>
    <testCase name="SaveSurveyResult Controller Should return 200 on success" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/account/add-account/db-add-account.spec.ts">
    <testCase name="DbAddAccount Usecase should call Hasher with correct password" duration="1"/>
    <testCase name="DbAddAccount Usecase should throw if Hasher throw" duration="5"/>
    <testCase name="DbAddAccount Usecase should call AddAccountRepository with correct values" duration="0"/>
    <testCase name="DbAddAccount Usecase should throw if AddAccountRepository throw" duration="0"/>
    <testCase name="DbAddAccount Usecase should return an account on success" duration="0"/>
    <testCase name="DbAddAccount Usecase should return null if LoadAccountByEmailRepository not return null" duration="1"/>
    <testCase name="DbAddAccount Usecase should call LoadAccountByEmailRepository with correct email" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/infra/db/mongodb/survey/survey-mongo-repository.spec.ts">
    <testCase name="Survey Mongo Repository add() Should add a survey on success" duration="6"/>
    <testCase name="Survey Mongo Repository loadAll() Should load all survey on success" duration="9"/>
    <testCase name="Survey Mongo Repository loadAll() Should load empty list" duration="2"/>
    <testCase name="Survey Mongo Repository loadById() Should load survey by id on success" duration="3"/>
    <testCase name="Survey Mongo Repository loadById() Should return empty if load survey by id unknown" duration="4"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/account/load-account-by-token/db-load-account-by-token.spec.ts">
    <testCase name="DbLoadAccountByToken Usecase Should call Decrypter with correct values" duration="0"/>
    <testCase name="DbLoadAccountByToken Usecase Should return null if Decrypter returns null" duration="0"/>
    <testCase name="DbLoadAccountByToken Usecase Should call LoadAccountByTokenRepository with correct values" duration="1"/>
    <testCase name="DbLoadAccountByToken Usecase Should return null if LoadAccountByTokenRepository returns null" duration="0"/>
    <testCase name="DbLoadAccountByToken Usecase Should return an account on success" duration="1"/>
    <testCase name="DbLoadAccountByToken Usecase should throw if Decrypter throw" duration="7"/>
    <testCase name="DbLoadAccountByToken Usecase should throw if LoadAccountByTokenRepository throw" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/infra/db/mongodb/survey-result/survey-result-mongo-repository.spec.ts">
    <testCase name="Survey Mongo Repository save() Should add a survey result if its new" duration="8"/>
    <testCase name="Survey Mongo Repository save() Should update survey result if its not new" duration="7"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/presentation/controllers/access/login/login-controller.spec.ts">
    <testCase name="Login Controller should call Authentication with correct values" duration="0"/>
    <testCase name="Login Controller should return 401 if invalid credentials are provided" duration="0"/>
    <testCase name="Login Controller should return 500 if Authentication throws" duration="9"/>
    <testCase name="Login Controller should return 200 if valid credentials are provided" duration="1"/>
    <testCase name="Login Controller should call Validation with correct value" duration="0"/>
    <testCase name="Login Controller should return 400 if Validation returns an error" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/routes/survey-routes.test.ts">
    <testCase name="Survey Routes POST /surveys should return 403 on add survey without accessToken " duration="33"/>
    <testCase name="Survey Routes POST /surveys should return 204 on add survey with valid accessToken " duration="12"/>
    <testCase name="Survey Routes GET /surveys should return 403 on load surveys without accessToken " duration="4"/>
    <testCase name="Survey Routes GET /surveys should return 200 on load survey with valid accessToken " duration="6"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/presentation/controllers/survey/add-survey/add-survey-controller.spec.ts">
    <testCase name="AddSurvey Controller Should call Validation with correct values" duration="1"/>
    <testCase name="AddSurvey Controller Should return 400 if Validation false" duration="1"/>
    <testCase name="AddSurvey Controller Should call AddSurvey with correct values" duration="0"/>
    <testCase name="AddSurvey Controller Should return 500 if AddSurvey throws" duration="5"/>
    <testCase name="AddSurvey Controller Should return 204 on success" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/decorators/log-contoller-decorator.spec.ts">
    <testCase name="LogController Decorator should call controller handle" duration="1"/>
    <testCase name="LogController Decorator should return the same result of the controller" duration="0"/>
    <testCase name="LogController Decorator should call LogErrorRepository with correct error if controller returns a server error" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/presentation/middlewares/auth-middleware.spec.ts">
    <testCase name="Auth Middleware Shoul return 403 if no x-access-token exists in headers" duration="0"/>
    <testCase name="Auth Middleware Shoul call LoadAccountByToken with correct accessToken" duration="0"/>
    <testCase name="Auth Middleware Shoul return 403 if LoadAccountByToken returns null" duration="1"/>
    <testCase name="Auth Middleware Shoul return 200 if LoadAccountByToken returns an account" duration="0"/>
    <testCase name="Auth Middleware Shoul return 500 if LoadAccountByToken returns throws" duration="4"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/routes/survey-result-routes.test.ts">
    <testCase name="Survey Routes PUT /surveys/:surveyId/results should return 403 on save survey result without accessToken " duration="13"/>
    <testCase name="Survey Routes PUT /surveys/:surveyId/results should return 200 on save survey result with accessToken " duration="12"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/infra/criptography/bcrypt-adapter/bcrypt-adapter.spec.ts">
    <testCase name="Bcrypt Adapter hash() Should call hash with correct values" duration="1"/>
    <testCase name="Bcrypt Adapter hash() Should return a valid hash on hash success" duration="0"/>
    <testCase name="Bcrypt Adapter hash() Should throw if sign throws" duration="5"/>
    <testCase name="Bcrypt Adapter compare() Should call compare with correct values" duration="1"/>
    <testCase name="Bcrypt Adapter compare() Should return true when compare successds" duration="1"/>
    <testCase name="Bcrypt Adapter compare() Should throw if compare throws" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/infra/criptography/jwt-adapter/jwt-adapter.spec.ts">
    <testCase name="Jwt Adapter sign() Should call sign with correct values" duration="1"/>
    <testCase name="Jwt Adapter sign() Should return a token on sign successds" duration="0"/>
    <testCase name="Jwt Adapter sign() Should throw if sign throws" duration="5"/>
    <testCase name="Jwt Adapter verify() Should call verify with correct values" duration="0"/>
    <testCase name="Jwt Adapter verify() Should return a value on verify successds" duration="0"/>
    <testCase name="Jwt Adapter verify() Should throw if verify throws" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/presentation/controllers/survey/load-surveys/load-surveys-controller.spec.ts">
    <testCase name="LoadSurveys Controller Should call LoadSurveys" duration="0"/>
    <testCase name="LoadSurveys Controller Should return 200 on success" duration="0"/>
    <testCase name="LoadSurveys Controller Should return 204 if LoadSurveys returns empty" duration="1"/>
    <testCase name="LoadSurveys Controller Should return 500 if AddSurvey throws" duration="5"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/survey-result/save-survey-result/db-save-survey-result.spec.ts">
    <testCase name="DbAddSurvey Usecase Should call SaveSurveyResultRepository with correct values" duration="1"/>
    <testCase name="DbAddSurvey Usecase Should throw if SaveSurveyResultRepository throws" duration="6"/>
    <testCase name="DbAddSurvey Usecase Should return SurveyResult on success" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/routes/login-routes.test.ts">
    <testCase name="Login Routes POST /signup should return 200 on signup " duration="630"/>
    <testCase name="Login Routes POST /login should return 200 on login " duration="506"/>
    <testCase name="Login Routes POST /login should return 401 on login " duration="4"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/survey/load-survey-by-id/db-load-survey-by-id.spec.ts">
    <testCase name="DbLoadSurveyById Should call LoadSurveyByIdRepository" duration="1"/>
    <testCase name="DbLoadSurveyById Should return Survey when calls with correct id" duration="1"/>
    <testCase name="DbLoadSurveyById should throw if LoadSurveyByIdRepository throw" duration="4"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/validation/validators/validation-composite.spec.ts">
    <testCase name="Validation Composite should return an error if any validation fails" duration="1"/>
    <testCase name="Validation Composite should return the first error if more then one validation fails" duration="0"/>
    <testCase name="Validation Composite should not return if validation succeeds" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/survey/load-surveys/db-load-surveys.spec.ts">
    <testCase name="DbLoadSurveys Should call LoadSurveysRepository" duration="1"/>
    <testCase name="DbLoadSurveys Should return a list of Surveys on success" duration="1"/>
    <testCase name="DbLoadSurveys should throw if LoadSurveysRepository throw" duration="4"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/validation/validators/email-validation.spec.ts">
    <testCase name="Email Validation should return an error if EmailValidator returns false" duration="1"/>
    <testCase name="Email Validation should call EmailValidator with correct email" duration="0"/>
    <testCase name="Email Validation should throws if EmailValidator throws" duration="11"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/data/usecases/survey/add-survey/db-add-survey.spec.ts">
    <testCase name="DbAddSurvey Usecase Should call AddSurveyRepository with correct values" duration="1"/>
    <testCase name="DbAddSurvey Usecase Should throw if AddSurveyRepository throws" duration="4"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/factories/controllers/login/signup/signup-validation-factory.spec.ts">
    <testCase name="SignUpValidation Factory should call ValidationComposite with all validations" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/factories/controllers/login/login/login-validation-factory.spec.ts">
    <testCase name="LoginValidation Factory should call ValidationComposite with all validations" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/validators/email-validator-adapter.spec.ts">
    <testCase name="EmailValidator Adapter should return false if validator returns false" duration="1"/>
    <testCase name="EmailValidator Adapter should return true if validator returns true" duration="1"/>
    <testCase name="EmailValidator Adapter should call validator with correct email" duration="1"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/infra/db/mongodb/log/log-mongo-repository.spec.ts">
    <testCase name="Log Mongo Repository should create an error log on success" duration="10"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/validation/validators/compare-fields-validation.spec.ts">
    <testCase name="CompareFields Validation should return a InvalidParamError if validation fails" duration="0"/>
    <testCase name="CompareFields Validation should not return if validation succeeds" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/factories/controllers/survey/add-survey/add-survey-validation-factory.spec.ts">
    <testCase name="AddSurveyValidation Factory should call ValidationComposite with all validations" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/validation/validators/required-field-validation.spec.ts">
    <testCase name="RequiredField Validation should return a MissingParamError if validation fails" duration="0"/>
    <testCase name="RequiredField Validation should not return if validation succeeds" duration="0"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/middlewares/content-type.test.ts">
    <testCase name="Content Type Middleware should return default content type as json" duration="10"/>
    <testCase name="Content Type Middleware should return xml content type when forced" duration="5"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/infra/db/mongodb/helpers/mongo-helper.spec.ts">
    <testCase name="Mongo Helper Should reconnect if mongodb is down" duration="7"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/middlewares/cors.test.ts">
    <testCase name="CORS Middleware should enable CORS" duration="10"/>
  </file>
  <file path="/home/jefersongriza/Konora/kara/src/main/middlewares/body-parser.test.ts">
    <testCase name="Body Parser Middleware should parse body as json" duration="21"/>
  </file>
</testExecutions>